h3 9. Obyte GUI wallet
p.
  Posting data or transactions to the Obyte network
  require payment in Bytes.  In a real-life application,
  this can be done by the users of your application from their wallets.
p.
  However, in this tutorial, you will have to fund
  the transactions yourself from your own Obyte wallet.

h5 Setting up Obyte testnet GUI wallet
p Instructions on creating
  code.text-info  Obyte testnet GUI wallet
  span  can be found at
  code.text-info  #[a( href='https://obyte.org/testnet.html' target="_blank" ) https://obyte.org/testnet.html].
  span  Download the version for your operating system and
  span  install it selecting the option for generating the desktop icon.
p For the purposes of this tutorial, we will refer to this wallet as your
  code.text-info  GUI wallet
  span .

h5 Funding Obyte testnet GUI wallet
p Fund your
  code.text-info  Obyte testnet GUI wallet
  span  by clicking on the link on the
  code.text-info  #[a( href='https://obyte.org/testnet.html' target="_blank" ) https://obyte.org/testnet.html] page.
  span  You will need to wait 10-15 minutes for the transaction to be confirmed.

h3 10. Setting up your Obyte js wallet
p.
  Next, you need to create a wallet to work with your application.
  This wallet will be used to fund saving data and sending payments.
p For the purposes of this tutorial, we will refer to it as
  code.text-info  js Wallet
  span . Open your terminal and run:

div.card.bg-light.card-body
  pre.text-info.
    npm i byteball bitcore-mnemonic --save

br
p Then create
  code.text-info  obyte
  span  folder in your application directory and add
  code.text-info  createWallet.js
  span  file containing following code:

div.card.bg-light.card-body
  pre.text-info.
    const { toWif, getChash160 } = require('byteball/lib/utils');
    const Mnemonic = require('bitcore-mnemonic');

    const testnet = true; // Change to "false" to generate live wallet

    const path = testnet ? "m/44'/1'/0'/0/0" : "m/44'/0'/0'/0/0";
    let mnemonic = new Mnemonic();
    while (!Mnemonic.isValid(mnemonic.toString())) {
    mnemonic = new Mnemonic();
    }
    const xPrivKey = mnemonic.toHDPrivateKey();
    const { privateKey } = xPrivKey.derive(path);
    const privKeyBuf = privateKey.bn.toBuffer({ size: 32 });
    const wif = toWif(privKeyBuf, testnet);
    const pubkey = privateKey.publicKey.toBuffer().toString('base64');
    const definition = ['sig', { pubkey }];
    const address = getChash160(definition);

    console.log(
    'Seed:', mnemonic.phrase,
    '\nPath:', path,
    '\nWIF:', wif,
    '\nPublic key:', pubkey,
    '\nAddress:', address
    );

br
p Run the above script to generate your
  code.text-info  js wallet
  span  by executing the following command:

div.card.bg-light.card-body
  pre.text-info.
    node obyte/createWallet

br
p This creates your
  code.text-info  js wallet
  span .
  strong  Make a note of the js wallet's info
  span  reported on the console.
p The generated
  code.text-info  WIF
  span  will be used for Obyte js integration and
  code.text-info  the address
  span  will be used for funding.  When working with testnet,
  span  you can save this in the
  code.text-info  obyte/TestWalletInfo.txt
  span  file. However, when working with live wallets, make sure to
  strong.
      keep this data private
  span , as anyone with access to this data would be able to control funds in your wallet!

h5 Funding your js wallet
p Fund your new
  code.text-info  js wallet
  span  by sending Bytes to its address from your
  code.text-info  GUI wallet
  span . Make sure you send enough Bytes to use for testing.  20,000 or more.

p Check that everything worked by going to the
  code.text-info  #[a( href='https://testnetexplorer.obyte.org/' target="_blank" ) Testnet DAG explorer]
  span  to view public transactions and searching using your
  code.text-info  js wallet
  span 's address.
